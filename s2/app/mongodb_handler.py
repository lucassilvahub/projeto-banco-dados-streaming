import asyncio
import motor.motor_asyncio
from datetime import datetime
import logging
import os
import json
from bson import ObjectId
import traceback

# ========================
# üõ†Ô∏è Configura√ß√µes
# ========================
MONGO_HOST = os.getenv("MONGO_HOST", "mongo")
MONGO_PORT = int(os.getenv("MONGO_PORT", "27017"))
MONGO_DB = os.getenv("MONGO_DB", "streaming_db")
MONGO_URI = f"mongodb://{MONGO_HOST}:{MONGO_PORT}"
OUTPUT_TOPIC = "response_events"  # Defini√ß√£o local para evitar importa√ß√£o circular

# ========================
# üì• Configura√ß√£o de Logs
# ========================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("s2_mongodb")

# Classe auxiliar para permitir JSON serializa√ß√£o de ObjectId
class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        if isinstance(o, datetime):
            return o.isoformat()
        return json.JSONEncoder.default(self, o)

# ========================
# üì° Fun√ß√µes de MongoDB
# ========================
async def connect_to_mongodb(max_retries=15, retry_delay=5):
    """Conecta ao MongoDB com v√°rias tentativas."""
    client = None
    db = None
    retries = 0
    
    while client is None and retries < max_retries:
        try:
            logger.info(f"üîå Tentando conectar ao MongoDB em {MONGO_URI} ({retries+1}/{max_retries})...")
            client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)
            # Realizar uma opera√ß√£o para verificar se a conex√£o est√° funcionando
            await client.admin.command('ping')
            
            db = client[MONGO_DB]
            logger.info("‚úÖ Conex√£o com o MongoDB bem-sucedida!")
            return client, db
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar ao MongoDB: {e}")
            retries += 1
            await asyncio.sleep(retry_delay)
    
    if client is None:
        logger.error("‚ùå N√£o foi poss√≠vel conectar ao MongoDB ap√≥s v√°rias tentativas.")
        return None, None

async def inicializar_mongodb(db):
    """Configura as cole√ß√µes iniciais e √≠ndices necess√°rios."""
    try:
        logger.info("üèóÔ∏è Verificando/criando cole√ß√µes e √≠ndices no MongoDB...")
        
        # Criar cole√ß√µes se n√£o existirem
        if "historico_visualizacao" not in await db.list_collection_names():
            await db.create_collection("historico_visualizacao")
            logger.info("‚úÖ Cole√ß√£o 'historico_visualizacao' criada")
        
        if "recomendacoes" not in await db.list_collection_names():
            await db.create_collection("recomendacoes")
            logger.info("‚úÖ Cole√ß√£o 'recomendacoes' criada")
        
        # Criar √≠ndices para melhorar performance de consultas
        # √çndice para hist√≥rico de visualiza√ß√£o
        await db.historico_visualizacao.create_index([("user_id", 1)])
        await db.historico_visualizacao.create_index([("user_id", 1), ("tipo", 1)])
        await db.historico_visualizacao.create_index([("data", -1)])
        
        # √çndice para recomenda√ß√µes
        await db.recomendacoes.create_index([("user_id", 1)], unique=True)
        
        logger.info("‚úÖ √çndices MongoDB criados com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar cole√ß√µes e √≠ndices no MongoDB: {e}")
        logger.error(traceback.format_exc())

async def processar_evento_mongodb(db, evento, producer):
    """Processa eventos espec√≠ficos do MongoDB"""
    tipo = evento.get("event_type")
    correlation_id = evento.get("correlation_id", "unknown")
    
    # MongoDB n√£o est√° sendo utilizado para eventos via Kafka nesta implementa√ß√£o
    # Esta fun√ß√£o est√° aqui para futura expans√£o
    return None