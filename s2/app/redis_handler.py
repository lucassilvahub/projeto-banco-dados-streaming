import asyncio
import aioredis
from datetime import datetime, timedelta
import logging
import os
import json
import traceback

# ========================
# üõ†Ô∏è Configura√ß√µes
# ========================
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}"

# ========================
# üì• Configura√ß√£o de Logs
# ========================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("s2_redis")

# ========================
# üì° Fun√ß√µes de Redis
# ========================
async def connect_to_redis(max_retries=15, retry_delay=5):
    """Conecta ao Redis com v√°rias tentativas."""
    redis = None
    retries = 0
    
    while redis is None and retries < max_retries:
        try:
            logger.info(f"üîå Tentando conectar ao Redis em {REDIS_URL} ({retries+1}/{max_retries})...")
            redis = await aioredis.from_url(REDIS_URL, decode_responses=True)
            # Verificar conex√£o
            await redis.ping()
            logger.info("‚úÖ Conex√£o com o Redis bem-sucedida!")
            return redis
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar ao Redis: {e}")
            retries += 1
            await asyncio.sleep(retry_delay)
    
    if redis is None:
        logger.error("‚ùå N√£o foi poss√≠vel conectar ao Redis ap√≥s v√°rias tentativas.")
        return None

async def inicializar_redis(redis):
    """Configura chaves e estruturas iniciais necess√°rias."""
    try:
        logger.info("üèóÔ∏è Verificando configura√ß√µes iniciais do Redis...")
        
        # Verificar se o Redis est√° vazio e configurar algumas chaves globais
        counter = await redis.exists("app:config:initialized")
        
        if not counter:
            # Primeira inicializa√ß√£o, criar chaves de configura√ß√£o
            logger.info("‚öôÔ∏è Inicializando configura√ß√µes do Redis...")
            
            # Adicionar timestamp de inicializa√ß√£o
            await redis.set("app:config:initialized", datetime.utcnow().isoformat())
            
            # Counters para estat√≠sticas
            await redis.set("app:stats:sessoes_ativas", 0)
            await redis.set("app:stats:usuarios_online", 0)
            await redis.set("app:stats:cache_hits", 0)
            
            logger.info("‚úÖ Configura√ß√µes iniciais do Redis criadas")
        else:
            # Incrementar contador de inicializa√ß√µes
            await redis.incr("app:stats:reinicializacoes")
            logger.info("‚úÖ Redis j√° inicializado anteriormente")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar configura√ß√µes do Redis: {e}")
        logger.error(traceback.format_exc())

async def processar_evento_redis(redis, evento, producer):
    """Processa eventos espec√≠ficos do Redis"""
    tipo = evento.get("event_type")
    correlation_id = evento.get("correlation_id", "unknown")
    
    # Redis n√£o est√° sendo utilizado para eventos via Kafka nesta implementa√ß√£o
    # Esta fun√ß√£o est√° aqui para futura expans√£o
    return None